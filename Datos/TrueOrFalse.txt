La funcion hash transforma una variable en un numero entero.;La funcion hash retorna una posicion para el dato que se quiere ingresar.;Una funcion hash valida consiste en retornar una constante (por ejemplo: return 0).;Una buena funcion hash dispersa los datos dentro de la tabla.;La funcion hash retorna un numero entero.;En la tabla hash, si hay colision se aplica un metodo para resolver el problema.;Existen distintos metodos de resolucion de colisiones para la tabal hash.;La eficiencia temporal de las operaciones del TDA mapa depende de su implementacion.;Se puede usar el TDA mapa para contar las ocurrencias de palabras en un texto.;El TDA mapa se puede usar para clasificar datos en distintas categorias.;En un TDA mapa, para almacenar datos con claves repetidas, se pueden usar listas para agrupar estos datos.;El TDA Mapa no permite almacenar claves repetidas.;La busqueda en una tabla hash se detiene al llegar a una casilla vacia.;Es conveniente agrandar la tabla hash antes de que llegue a su capacidad.;Entre mas elementos tenga la tabla hash, mayor es la probabilidad de que ocurran colisiones.;Es eficiente en la busqueda de un dato especifico.;Almacena datos de manera desordenada.;La funcion hash permite saber la posicion en donde deberia encontrarse un dato.;La complejidad temporal de 5(n+1)/(n−1) es O(1).;Acceder al i-esimo dato de una lista enlazada tiene complejidad O(i).;Buscar el mayor elemento en un arreglo ordenado tiene complejidad O(1).;Llamar n veces a una funcion con complejidad constante tiene complejidad O(n).;La complejidad temporal de n+n^2+n^3 es O(n^3).;Llamar 10 veces a una funcion con complejidad lineal tiene complejidad O(n).;Ordenar los datos de una lista enlazada usando el ordenamiento burbuja tiene complejidad O(i).;La complejidad temporal de 5^n+n^5 es O(5^n).;Se suelen utilizar arreglos para implementar pilas y colas.;Cuando insertamos un dato en un arreglo lleno, debemos redimensionarlo.;Al implementar una pila usando arreglos, el arreglo se va llenando de izquierda a derecha.;El arreglo ofrece ventajas y desventajas al compararse con una lista enlazada doble.;El arreglo permite un acceso mas eficiente/rapido al i-esimo elemento.;Todas las variables locales se almacenan en la misma zona de memoria.;Las variables globales se almacenan en la zona static.;Los datos de un arreglo se almacenan en memoria de manera consecutiva.;En un arreglo a[10], a es un puntero que apunta a la primera casilla del arreglo.;Para pasar datos por referencia en funciones se necesitan punteros.;Un puntero es un tipo de dato que almacena la direccion de memoria de otra variable.;int a[20] crea un arreglo de 20 enteros.;Se pueden inicializar los arreglos de manera estatica o dinamica.;En un arreglo, a[2] es equivalente a *(a+2).;Para inicializar un arreglo de manera dinamica se debe reservar la memoria correspondiente en la zona de memoria Heap.;En un arreglo a[10], a es un puntero que apunta a la primera casilla del arreglo.;Buscar un dato especifico en una lista enlazada requiere recorrer la lista.;Eliminar el ultimo elemento de una lista enlazada circular requiere recorrer la lista enlazada circular.;Para insertar al principio en una lista enlazada simple no es necesario recorrer dicha lista.;Insertar un elemento al final en una lista enlazada circular no requiere recorrer la lista enlazada circular.;Insertar al final en un arreglo circular no requiere que se recorrar dicho arreglo.;Un arreglo es una buena alternativa para implementar pilas y colas.
Una buena funcion hash no genera colisiones.;La funcion hash puede retornar cualquier tipo de dato (void*).;La funcion hash busca una casilla disponible (vacia) para insertar el dato.;La funcion hash retorna la clave del dato que se quiere ingresar.;En la tabla hash, las colisiones no pueden ocurrir. La funcion retorna valores distintos para claves distintas.;Las colisiones en la tabla hash ocurre cuando se insertan dos claves iguales en la tabla.;Si hay colision en una tabla hash, se aumenta el tamanho de la tabla.;El TDA mapa es recomendable debido a la rapidez de sus operaciones.;Es recomendable usar el TDA mapa si queremos acceder rapidamente al ultimo elemento ingresado.;Es recomendable usar TDA mapa si queremos almacenar elementos con una secuencia determinada.;En la busqueda en una tabla hash, antes de retornar un dato debe verificar que el valor coincida con la que se busca.;En la tabla hash, la busqueda se detiene al llegar a un dato con clave distinta a la que se busca.;Es conveniente ocupar toda la capacidad de la tabla, para utilizar toda la memoria disponible.;La funcion hash agranda la tabla cuando se ocupan todas las casillas disponibles.;Es eficiente en la busqueda de datos ordenados.;La complejidad temporal de 3n^2+m^2 es O(n+m).;La complejidad de insertar un elemento en una cola es O(n).;El algoritmo mas eficiente para ordenar un conjunto de datos tiene complejidad O(n).;El algoritmo mas eficiente para sumar los elementos de la secuencia: 1+2+…+n tiene complejidad O(n^2).;Insertar n elementos ordenados en una lista enlazada tiene complejidad O(n).;La busqueda binaria en un arreglo ordenado tiene complejidad O(nlogn).;Eliminar el primer dato de una lista enlazada simple tiene complejidad O(n).;La complejidad temporal de 1000nlogn + n^2 es O(nlogn).;Hacer un bucle que itera n veces sobre otro bucle que realiza m iteraciones tiene complejidad O(n+m).;Cuando eliminamos un dato de un arreglo debemos redimensionarlo.;Cuando insertamos un dato en un arreglo siempre debemos redimensionarlo.;Son mejores que las listas enlazadas.;Son peores que las listas enlazadas.;;Para eliminar un elemento de un arreglo es necesario cambiar su valor a NULL.;Al implementar una pila usando arreglos, el elemento top corresponde al primer elemento del arreglo.;Las lista enlazada doble circular es la estructura mas recomendada para implementar una Lista.;Un arreglo generalmente ocupa menos memoria que la lista enlazada.;El arreglo es mucho mas eficiente/rapido a la hora de buscar un dato determinado.;Los punteros son un tipo de dato abstracto.;Las variables definidas en la funcion main son globales.;int* a[10] crea un arreglo de 10 enteros.;Los punteros permiten el paso de datos por valor a funciones.; Al modificar la direccion referenciada por un puntero, tambien se modifica la direccion del dato referenciado.;En la zona de memoria “stack” es posible que se formen huecos de memoria sin reservar.;La operacion malloc permite inicializar un arreglo con ceros (0).;Luego de terminar de usar un arreglo estatico es necesario liberar la memoria usando free.;Arreglos estaticos se almacenan en la zona de memoria Heap.;Los arreglos se deben pasad a las funciones por valor.;El error “stack overflow” ocurre cuando se generan demasiadas variables locales llenando el Stack de memoria.;Insertar entremedio en un arreglo no requiere recorrer el arreglo.;Acceder al i-esimo elemento en un arreglo requiere recorrer el arreglo completo.;Insertar un elemento en una cola requiere recorrer la cola.;El arreglo permite una eliminacion mas eficiente/rapida del i-esimo elemento que la lista enlazada.